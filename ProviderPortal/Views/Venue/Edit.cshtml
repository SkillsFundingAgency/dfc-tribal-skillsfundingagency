@model Tribal.SkillsFundingAgency.ProviderPortal.Models.AddEditVenueModel

@{
    ViewBag.Title = AppGlobal.Language.GetText(this, "Title", "Edit Venue");
}

<h2 class="courses">@AppGlobal.Language.GetText(this, "Header", "Edit Venue")</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>@AppGlobal.Language.GetText(this, "SubHeader", "")</h4>
        <hr />

        @if (Model.RecordStatusId == (Int32)Constants.RecordStatus.Archived)
        {
            <div class="col-md-offset-2 warning">
                @Html.Raw(AppGlobal.Language.GetText(this, "VenueArchivedWarning", "<strong>Warning:</strong> this venue is currently <strong>ARCHIVED</strong>."))
            </div>
        }

        @Html.EditableDataValidationSummary(false)        
        @Html.HiddenFor(model => model.VenueId)

        @Html.RequiredFields(new {@class="col-md-offset-2"}) 

        <div class="form-group">
            @Html.LanguageLabelFor(model => model.ProviderOwnVenueRef, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProviderOwnVenueRef, new { htmlAttributes = new {@class = "form-control"} })
                @Html.ValidationMessageFor(model => model.ProviderOwnVenueRef)
            </div>
        </div>

        <div class="form-group">
            @Html.LanguageLabelFor(model => model.VenueName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VenueName, new { htmlAttributes = new {@class = "form-control"} })
                @Html.ValidationMessageFor(model => model.VenueName)
            </div>
        </div>

        @Html.EditorFor(m => m.Address, "_EditAddressPartial")

        <div class="form-group">
            @Html.LanguageLabelFor(model => model.Telephone, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new {@class = "form-control"} })
                @Html.ValidationMessageFor(model => model.Telephone)
            </div>
        </div>

        <div class="form-group">
            @Html.LanguageLabelFor(model => model.Email, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new {@class = "form-control"} })
                @Html.ValidationMessageFor(model => model.Email)
            </div>
        </div>

        <div class="form-group">
            @Html.LanguageLabelFor(model => model.Website, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Website, new { htmlAttributes = new {@class = "form-control", data_url = "true"} })
                @Html.ValidationMessageFor(model => model.Website)
            </div>
        </div>

        <div class="form-group">
            @Html.LanguageLabelFor(model => model.Fax, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Fax, new { htmlAttributes = new {@class = "form-control"} })
                @Html.ValidationMessageFor(model => model.Fax)
            </div>
        </div>

        <div class="form-group">
            @Html.LanguageLabelFor(model => model.Facilities, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Facilities, new { htmlAttributes = new {@class = "form-control"} })
                @Html.ValidationMessageFor(model => model.Facilities)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@AppGlobal.Language.GetText(this, "Submit", "Save")" class="btn btn-success" />
                @if (Model.RecordStatusId != (Int32)Constants.RecordStatus.Archived) 
                {
                    <input id="btnArchive" type="button" name="Archive" value="@AppGlobal.Language.GetText(this, "Archive", "Archive")" class="btn btn-default" />
                }
                else
                {
                    <input id="btnUnarchive" type="button" name="Unarchive" value="@AppGlobal.Language.GetText(this, "Unarchive", "Unarchive")" class="btn btn-default" />
                }
                @if (Permission.HasPermission(false, false, Permission.PermissionName.CanDeleteProviderVenue))
                {
                    <input id="btnDelete" type="button" name="Delete" value="@AppGlobal.Language.GetText(this, "Delete", "Delete")" class="btn btn-default" />
                }
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function() {

            $("#btnArchive").click(function() {
                if (confirm('@AppGlobal.Language.GetText(this, "ArchiveVenueWarning", "Are you sure you would like to archive this venue?")') === false) {
                    return;
                }

                // Check if there are any opportunities for this venue
                var url = '@Url.Action("GetOpportunities", "Venue", new {Id = @Model.VenueId})';
                $.ajax({
                    url: url,
                    success: function(result) {
                        var archiveOpportunities = false;
                        if (result.length != 0) {
                            archiveOpportunities = confirm("@AppGlobal.Language.GetText(this, "ArchiveOpportunitiesForVenue", "You have course opportunities attached to this venue, would you like to archive these also?")");
                        }
                        url = '@Url.Action("Archive", "Venue", new {Id = @Model.VenueId, ArchiveOpportunities = "__ArchiveOpportunities__"})';
                        url = url.replace('__ArchiveOpportunities__', archiveOpportunities);
                        $.ajax({
                            url: url,
                            success: function() {
                                if (archiveOpportunities) {
                                    window.location.reload(true);
                                } else {
                                    alert("@AppGlobal.Language.GetText(this, "ReAssignVenuesForOpportunities", "Please re-assign venues to these opportunities")");
                                    window.location.replace("@Url.Action("List", "Course", new { VenueId = Model.VenueId })");
                                }
                            },
                            error: function() {
                                alert("Error archiving venue");
                            },
                            cache: false,
                            type: 'POST',
                            contentType: 'application/x-www-form-urlencoded, charset=utf-8'
                        });
                    },
                    error: function() {
                        alert("Error archiving venue");
                    },
                    cache: false,
                    type: 'POST',
                    contentType: 'application/json, charset=utf-8',
                    dataType: 'json'
                });
            });

            $("#btnUnarchive").click(function() {
                var url = '@Url.Action("Unarchive", "Venue", new {Id = @Model.VenueId})';
                $.ajax({
                    url: url,
                    success: function() {
                        window.location.reload(true);
                    },
                    error: function() {
                        alert("Error unarchiving venue");
                    },
                    cache: false,
                    type: 'POST',
                    contentType: 'application/x-www-form-urlencoded, charset=utf-8'
                });
            });

            $("#btnDelete").click(function() {
                if (confirm('@AppGlobal.Language.GetText(this, "DeleteVenueWarning", "Are you sure you would like to delete this venue?  Any opportunities attached to this venue will be archived (if they are not archived already).")') === false) {
                    return;
                }
                var url = '@Url.Action("Delete", "Venue", new {Id = @Model.VenueId})';
                $.ajax({
                    url: url,
                    success: function() {
                        window.location.replace("@Url.Action("List", "Venue")");
                    },
                    error: function() {
                        alert("Error deleting course");
                    },
                    cache: false,
                    type: 'POST',
                    contentType: 'application/x-www-form-urlencoded, charset=utf-8'
                });
            });

        });

    </script>
}