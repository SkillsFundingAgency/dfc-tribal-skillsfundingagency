<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" requirePermission="true"/>
    <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.414.0, Culture=neutral" requirePermission="true"/>
    <section name="dataConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings, Microsoft.Practices.EnterpriseLibrary.Data, Version=5.0.414.0, Culture=neutral" requirePermission="true"/>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration, Version=2.1.505.0, Culture=neutral"/>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
  </configSections>
  <loggingConfiguration name="Logging Application Block" tracingEnabled="true" defaultCategory="General" logWarningsWhenNoCategoriesMatch="true">
    <listeners>
      <add name="FlatFile TraceListener" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" fileName="c:\log\trace.log" header="" footer="" formatter="LogFile Formatter" traceOutputOptions="None" filter="All"/>
      <add name="Formatted EventLog TraceListener" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" source="IMS.NCS.CourseSearchService" formatter="Text Formatter" log="" machineName="" traceOutputOptions="None" filter="All"/>
      <add name="Logging Database Trace Listener" type="Microsoft.Practices.EnterpriseLibrary.Logging.Database.FormattedDatabaseTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging.Database, Version=5.0.414.0, Culture=neutral" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Database.Configuration.FormattedDatabaseTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging.Database, Version=5.0.414.0, Culture=neutral" databaseInstanceName="Logging Database" writeLogStoredProcName="WriteLog" addCategoryStoredProcName="AddCategory" formatter="Text Formatter" traceOutputOptions="None" filter="All"/>
    </listeners>
    <formatters>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" template="Timestamp: {timestamp}&#xA;Message: {message}&#xA;Category: {category}&#xA;Priority: {priority}&#xA;EventId: {eventid}&#xA;Severity: {severity}&#xA;Title:{title}&#xA;Machine: {machine}&#xA;Application Domain: {appDomain}&#xA;Process Id: {processId}&#xA;Process Name: {processName}&#xA;Win32 Thread Id: {win32ThreadId}&#xA;Thread Name: {threadName}&#xA;Extended Properties: {dictionary({key} - {value}&#xA;)}" name="Text Formatter"/>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" template="{timestamp} {message} {property(TypeName)} {property(MethodName)} {property(ReturnValue)} &#xA;{newline}Parameters: {dictionary({key} - {value})}" name="LogFile Formatter"/>
    </formatters>
    <logFilters>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" categoryFilterMode="AllowAllExceptDenied" name="Category"/>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" minimumPriority="5" maximumPriority="2147483647" name="Priority"/>
    </logFilters>
    <categorySources>
      <add switchValue="All" name="Exceptions">
        <listeners>
          <!-- <add name="Formatted EventLog TraceListener" /> -->
          <add name="Logging Database Trace Listener"/>
        </listeners>
      </add>
      <add switchValue="All" name="General">
        <listeners>
          <add name="FlatFile TraceListener"/>
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <allEvents switchValue="All" name="All Events"/>
      <notProcessed switchValue="All" name="Unprocessed Category"/>
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="Formatted EventLog TraceListener"/>
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>
  <exceptionHandling>
    <exceptionPolicies>
      <add name="WCF Exception Shielding">
        <exceptionTypes>
          <add name="Exception" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=5.0.414.0, Culture=neutral" logCategory="Exceptions" eventId="100" severity="Error" title="CourseSearchService Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.414.0, Culture=neutral" priority="100" useDefaultLogger="false"/>
              <add name="Wrap Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.414.0, Culture=neutral" exceptionMessage="An error occurred while processing your request. Please contact technical support using the following identifier: {handlingInstanceID}" exceptionMessageResourceType="" exceptionMessageResourceName="" wrapExceptionType="IMS.NCS.CourseSearchService.Common.Exceptions.LoggedException, IMS.NCS.CourseSearchService.Common"/>
            </exceptionHandlers>
          </add>
          <add name="FaultException" type="System.ServiceModel.FaultException, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="NotifyRethrow"/>
          <add name="LoggedException" type="IMS.NCS.CourseSearchService.Common.Exceptions.LoggedException, IMS.NCS.CourseSearchService.Common" postHandlingAction="NotifyRethrow"/>
          <add name="ThreadAbortException" type="System.Threading.ThreadAbortException, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="None"/>
        </exceptionTypes>
      </add>
      <add name="WCF Exception Policy">
        <exceptionTypes>
          <add name="Exception" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=5.0.414.0, Culture=neutral" logCategory="Exceptions" eventId="100" severity="Error" title="CourseSearchService Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.414.0, Culture=neutral" priority="100" useDefaultLogger="false"/>
              <add type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF, Version=5.0.414.0, Culture=neutral" exceptionMessage="An error has occured in NCS Course Search Service" faultContractType="System.ServiceModel.FaultException, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Fault Contract Exception Handler">
                <mappings>
                  <add source="Message" name="Description"/>
                </mappings>
              </add>
            </exceptionHandlers>
          </add>
          <add name="FaultException" type="System.ServiceModel.FaultException, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=5.0.414.0, Culture=neutral" logCategory="Exceptions" eventId="100" severity="Error" title="CourseSearchService Exception Handling" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.414.0, Culture=neutral" priority="100" useDefaultLogger="false"/>
            </exceptionHandlers>
          </add>
          <add name="LoggedException" type="IMS.NCS.CourseSearchService.Common.Exceptions.LoggedException, IMS.NCS.CourseSearchService.Common, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null" postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF, Version=5.0.414.0, Culture=neutral" exceptionMessage="An error has occured in NCS Course Search Service" faultContractType="System.ServiceModel.FaultException, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Fault Contract Exception Handler">
                <mappings>
                  <add source="Message" name="Description"/>
                </mappings>
              </add>
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
    </exceptionPolicies>
  </exceptionHandling>
  <dataConfiguration defaultDatabase="Logging Database">
    <providerMappings>
      <add databaseType="Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase, Microsoft.Practices.EnterpriseLibrary.Data, Version=5.0.414.0, Culture=neutral" name="System.Data.SqlClient"/>
    </providerMappings>
  </dataConfiguration>
  <connectionStrings>
    <add name="SFA_SearchAPIEntities" connectionString="metadata=res://*/Model.csdl|res://*/Model.ssdl|res://*/Model.msl;provider=System.Data.SqlClient;provider connection string=&quot;Data Source=.\MSSQLSERVER2014;initial catalog=SFA_SearchAPI;User Id=SFA_SearchAPI;Pwd=Pa55w0rd;MultipleActiveResultSets=False;App=EntityFramework&quot;" providerName="System.Data.EntityClient"/>
<!--    <add name="SFA_SearchAPIEntities" connectionString="metadata=res://*/Model.csdl|res://*/Model.ssdl|res://*/Model.msl;provider=System.Data.SqlClient;provider connection string=&quot;Data Source=ITS-DB01-S\MSSQL2014;initial catalog=SFA_SearchAPI;Integrated Security=True;MultipleActiveResultSets=False;App=EntityFramework&quot;" providerName="System.Data.EntityClient"/>-->
  </connectionStrings>
  <appSettings>
    <add key="EnableProviderRequestResponseLogging" value="True" />
    <add key="IncludeUCASData" value="True" />
    <add key="MinThreadsPerCPUCore" value="20" />
    <add key="MaxThreadsPerCPUCore" value="40" />
    <add key="UseV3SearchEnhancements" value="True" />
    <add key="RemoveLowestRankedResultPercentage" value="5" />
    <add key="ProviderFreeTextMatch" value="False" />
    <add key="CourseFreeTextMatch" value="True" />
    <add key="SearchCourseSummary" value="True" />
    <add key="SearchQualificationTitle" value="True" />
  </appSettings>
  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration, Version=2.1.505.0, Culture=neutral"/>
    <!-- Service Layer -->
    <alias alias="ICourseSearchService" type="Ims.Schemas.Alse.CourseSearch.Contract.ServiceInterface, Ims.Schemas.Alse.CourseSearch.Contract"/>
    <alias alias="CourseSearchService" type="IMS.NCS.CourseSearchService.ServiceImplementation.CourseSearchService, IMS.NCS.CourseSearchService.ServiceImplementation"/>
    <!-- Business Layer -->
    <alias alias="ICourseService" type="IMS.NCS.CourseSearchService.BusinessServices.ICourseService, IMS.NCS.CourseSearchService.BusinessServices"/>
    <alias alias="CourseService" type="IMS.NCS.CourseSearchService.BusinessServices.CourseService, IMS.NCS.CourseSearchService.BusinessServices"/>
    <alias alias="IProviderService" type="IMS.NCS.CourseSearchService.BusinessServices.IProviderService, IMS.NCS.CourseSearchService.BusinessServices"/>
    <alias alias="ProviderService" type="IMS.NCS.CourseSearchService.BusinessServices.ProviderService, IMS.NCS.CourseSearchService.BusinessServices"/>
    <!-- Query Layer-->
    <alias alias="ICourseQuery" type="IMS.NCS.CourseSearchService.Queries.ICourseQuery, IMS.NCS.CourseSearchService.Queries"/>
    <alias alias="CourseQuery" type="IMS.NCS.CourseSearchService.Queries.CourseQuery, IMS.NCS.CourseSearchService.Queries"/>
    <alias alias="IProviderQuery" type="IMS.NCS.CourseSearchService.Queries.IProviderQuery, IMS.NCS.CourseSearchService.Queries"/>
    <alias alias="ProviderQuery" type="IMS.NCS.CourseSearchService.Queries.ProviderQuery, IMS.NCS.CourseSearchService.Queries"/>
    <!-- Gateway Layer -->
    <alias alias="ICourseGateway" type="IMS.NCS.CourseSearchService.Sql.Gateways.ICourseGateway, IMS.NCS.CourseSearchService.Sql.Gateways"/>
    <alias alias="CourseGateway" type="IMS.NCS.CourseSearchService.Sql.Gateways.CourseGateway, IMS.NCS.CourseSearchService.Sql.Gateways"/>
    <alias alias="IProviderGateway" type="IMS.NCS.CourseSearchService.Sql.Gateways.IProviderGateway, IMS.NCS.CourseSearchService.Sql.Gateways"/>
    <alias alias="ProviderGateway" type="IMS.NCS.CourseSearchService.Sql.Gateways.ProviderGateway, IMS.NCS.CourseSearchService.Sql.Gateways"/>
    <container name="wcfContainer">
      <extension type="Interception"/>
      <register type="ICourseSearchService" mapTo="CourseSearchService">
        <lifetime type="singleton"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
        <interceptor type="TransparentProxyInterceptor"/>
      </register>
      <register type="ICourseService" mapTo="CourseService">
        <lifetime type="singleton"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
        <interceptor type="TransparentProxyInterceptor"/>
      </register>
      <register type="IProviderService" mapTo="ProviderService">
        <lifetime type="singleton"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
        <interceptor type="TransparentProxyInterceptor"/>
      </register>
      <register type="ICourseGateway" mapTo="CourseGateway">
        <lifetime type="singleton"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
        <interceptor type="TransparentProxyInterceptor"/>
      </register>
      <register type="IProviderGateway" mapTo="ProviderGateway">
        <lifetime type="singleton"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
        <interceptor type="TransparentProxyInterceptor"/>
      </register>
      <register type="ICourseQuery" mapTo="CourseQuery">
        <lifetime type="singleton"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
        <interceptor type="TransparentProxyInterceptor"/>
      </register>
      <register type="IProviderQuery" mapTo="ProviderQuery">
        <lifetime type="singleton"/>
        <interceptionBehavior type="PolicyInjectionBehavior"/>
        <interceptor type="TransparentProxyInterceptor"/>
      </register>
      <interception>
        <policy name="01. Global Policy">
          <matchingRule name="Namespace Matching Rule" type="NamespaceMatchingRule">
            <constructor>
              <param name="namespaceName" type="System.String" value="IMS.NCS.CourseSearchService."/>
              <param name="ignoreCase" type="System.Boolean" value="false"/>
            </constructor>
          </matchingRule>
          <callHandler type="IMS.NCS.CourseSearchService.Common.Unity.ExceptionCallHandler, IMS.NCS.CourseSearchService.Common" name="Exception Handling Call Handler">
            <constructor>
              <param name="exceptionPolicy" value="WCF Exception Policy"/>
            </constructor>
          </callHandler>
          <!-- Uncomment the following section to turn on tracing -->
          <!--<callHandler type="Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral" name="logging handler">
            <constructor/>
            <property name="LogBeforeCall" value="true" />
            <property name="LogAfterCall" value="true" />
            <property name="IncludeParameters" value="true" />
            <property name="IncludeCallStack" value="false" />
            <property name="IncludeCallTime" value="true" />
            <property name="BeforeMessage" value="Method call started" />
            <property name="AfterMessage" value="Method call completed" />
            <property name="Priority" value="-1" />
            <property name="Categories">
              <value value="General" typeConverter="IMS.Project.SampleWinService.Common.Unity.StringToListConverter, IMS.Project.SampleWinService.Common" />
            </property>
          </callHandler>-->
        </policy>
      </interception>
    </container>
  </unity>
  <!--
    For a description of web.config changes for .NET 4.5 see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.5" />
      </system.Web>
  -->
  <system.web>
    <compilation debug="true" targetFramework="4.5"/>
    <pages controlRenderingCompatibilityVersion="4.0"/>
  </system.web>
  <!-- Uncomment the following section to turn on WCF tracing -->
  <!--
    <system.diagnostics>
        <sources>
            <source name="System.ServiceModel"
                    switchValue="Information, ActivityTracing"
                    propagateActivity="true">
                <listeners>
                    <add name="traceListener"
                        type="System.Diagnostics.XmlWriterTraceListener"
                        initializeData= "C:\SearchAPI.svclog" />
                </listeners>
            </source>
        </sources>
    </system.diagnostics>
  -->
  <system.serviceModel>
    <diagnostics>
      <messageLogging logEntireMessage="true" logMessagesAtServiceLevel="true"/>
    </diagnostics>
    <services>
      <service behaviorConfiguration="IMS.NCS.CourseSearchService.CourseSearchService_Behavior" name="IMS.NCS.CourseSearchService.ServiceImplementation.CourseSearchService">
        <endpoint address="" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_CustomerServiceInterface" behaviorConfiguration="DependencyInjectionEndpointBehavior" contract="Ims.Schemas.Alse.CourseSearch.Contract.ServiceInterface"/>
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
      </service>
      <!--      <service name="CourseSearchService">
        <endpoint address="" binding="basicHttpBinding" bindingConfiguration="ServiceSOAPBinding" 
                  bindingNamespace="http://schemas.imservices.org.uk/alse/coursesearchservice/1.0" 
                  contract="Ims.Schemas.Alse.CourseSearch.Contract.ServiceInterface" name="ServiceEndpoint"/>
      </service>
      -->
    </services>
    <bindings>
      <basicHttpBinding>
        <binding name="BasicHttpBinding_CustomerServiceInterface" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:10:00" allowCookies="false" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard" maxBufferSize="65536" maxBufferPoolSize="524288" maxReceivedMessageSize="65536" messageEncoding="Text" textEncoding="utf-8" transferMode="Buffered" useDefaultWebProxy="true">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384" maxBytesPerRead="4096" maxNameTableCharCount="16384"/>
          <security mode="None">
            <transport clientCredentialType="None" proxyCredentialType="None" realm=""/>
            <message clientCredentialType="UserName" algorithmSuite="Default"/>
          </security>
        </binding>
      </basicHttpBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="IMS.NCS.CourseSearchService.CourseSearchService_Behavior">
          <serviceDebug includeExceptionDetailInFaults="false"/>
          <serviceMetadata httpGetEnabled="true"/>
          <serviceThrottling maxConcurrentCalls="128" maxConcurrentSessions="800" />
        </behavior>
      </serviceBehaviors>
      <endpointBehaviors>
        <behavior name="DependencyInjectionEndpointBehavior">
          <dependencyInjectionEndpointBehavior containerName="wcfContainer"/>
        </behavior>
      </endpointBehaviors>
    </behaviors>
    <serviceHostingEnvironment multipleSiteBindingsEnabled="true"/>
    <extensions>
      <behaviorExtensions>
        <add name="dependencyInjectionEndpointBehavior" type="IMS.NCS.CourseSearchService.Common.Unity.UnityEndpointBehaviorSection, IMS.NCS.CourseSearchService.Common, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null"/>
      </behaviorExtensions>
    </extensions>
  </system.serviceModel>
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true"/>
  </system.webServer>
  <!-- NOTE: This section has been added to resolve an issue with Unity and EntLib5 
             where EntLib4 is also installed on the server.  
             This section ensures we always pick up the EntLib5 dlls where version is ambiguous. -->
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.Common" fullName="Microsoft.Practices.EnterpriseLibrary.Common, Version=5.0.414.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.Data" fullName="Microsoft.Practices.EnterpriseLibrary.Data, Version=5.0.414.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" fullName="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.414.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging" fullName="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=5.0.414.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" fullName="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF, Version=5.0.414.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.Logging" fullName="Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.Logging.Database" fullName="Microsoft.Practices.EnterpriseLibrary.Logging.Database, Version=5.0.414.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.Unity" fullName="Microsoft.Practices.EnterpriseLibrary.Unity, Version=2.1.505.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.Unity.Configuration" fullName="Microsoft.Practices.EnterpriseLibrary.Unity.Configuration, Version=2.1.505.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.Unity.Interception" fullName="Microsoft.Practices.EnterpriseLibrary.Unity.Interception, Version=2.1.505.0, Culture=neutral"/>
      <qualifyAssembly partialName="Microsoft.Practices.EnterpriseLibrary.Unity.Interception.Configuration" fullName="Microsoft.Practices.EnterpriseLibrary.Unity.Interception.Configuration, Version=2.1.505.0, Culture=neutral"/>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.ServiceLocation" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-1.3.0.0" newVersion="1.3.0.0"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework"/>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"/>
    </providers>
  </entityFramework>
</configuration>